1、什么是线程安全问题？
当多个线程同时操作一个共享数据（这个共享数据可以是一个变量、一个对象、一个文件、一条数据库记录等），
并且这多个线程对这个共享数据有读有写操作，就会有线程安全问题。

涉及问题：
    （1）什么样的数据可以共享？
    讨论哪些变量，哪些对象可以共享？

    局部变量不共享。
    不同线程使用不同对象的实例变量，它们是无法共享。
    不同线程使用同一个对象的实例变量，它们是可以共享。
    不同线程访问同一个类的静态变量可以共享。

    （2）线程安全问题的表现是什么？
    多个线程访问共享数据的情况有点错乱。

经典案例：卖票问题
    3个窗口同时卖票，总票数是10张。

2、如何解决线程安全问题？
生活中：
    大小李子共用同一个卫生间，会有线程安全。
    解决：加锁

代码中：
    解决：加锁，给代码加锁
        某一段代码当一个线程在执行时，其他线程只能等待。

同步锁：synchronized，给代码加锁的关键字
形式：
（1）同步方法：锁整个方法
（2）同步代码块：锁方法体中的一小段代码

同步锁的原理：
    锁是什么？
    在Java中一切皆对象，同步锁也是一个对象。
    每一个Java对象在对象头中都有一个“锁”标记位，标记哪个线程占用这段代码。

    所以，必须保证使用共享数据的这多个线程使用“同一个”同步锁对象。

    锁对象是谁？

    如果是同步方法，静态方法的话，默认选择当前类的Class对象当同步锁对象。
                非静态方法的话，默认选择this对象当前同步锁对象。

注意：
（1）必须保证使用共享数据的这多个线程使用“同一个”同步锁对象。
（2）锁的代码范围不能太大，别的线程没有机会
（3）锁的代码范围不能太小，安全性没有彻底解决

代码范围原则：一次任务的完整代码
    比如：卖票：
        检查票数，减票数等都是一次任务的代码




