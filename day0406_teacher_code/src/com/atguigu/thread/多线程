1、开启main线程以外的其他线程的方式：
（1）继承Thread类
（2）实现Runnable接口
（3）实现Callable接口（高级部分学习）
（4）线程池（高级部分学习）

2、继承Thread类
步骤：
（1）编写一个线程类（有名或匿名）继承Thread类
（2）重写父类的一个方法public void run(){}
run方法的方法体又被称为线程体，就是该线程要独立完成的任务。
（3）创建该线程类的对象
（4）调用该线程类对象的start方法
注意：这里不是直接调用run方法，而是start，
    start方法的作用是启动线程，之后让CPU决定什么时候调用run方法。

    如果我们程序员手动调用run方法，就不再是多线程，还是main方法单线程。


3、实现Runnable接口
步骤：
（1）编写一个线程类（有名或匿名）实现Runnable接口
（2）重写父接口的一个抽象方法public void run(){}
run方法的方法体又被称为线程体，就是该线程要独立完成的任务。
（3）创建该线程类的对象
（4）创建一个Thread类的对象，并且让它代理我们Runnable的线程类对象
（5）调用Thread类对象的start方法

        Thread t = new Thread(my);//my给t对象的target属性赋值
        t.start(); //t线程启动后，线程调度器会调用就t对象的run方法

分析：Thread类的run方法源码
    public void run() {
        if (target != null) {
            target.run();
        }
    }

理解为：start方法是通知“线程调度器”帮你调用你写的run方法。

